<div></div>
  <h1 class="text-center my-3"><%=title%></h1>
  <div class ="row">
    <div class = "col-md-4"> <!--입력창이 화면 꽉 차서 col-md-4 사용. 6하면 절반됨. -->
        <form name="frm" class="input-group mb-2"> <!--input group 써야 버튼이랑 입력 한 줄로 나옴-->
          <input name="query" value = "인하대학교" class="form-control">
          <button type ="submit" class="btn-primary">검색</button> <!--button type=summit은 생략 가능-->
        </form>
    </div>

  </div>
  <div id="div_list"></div>
  <div class="text-center">
    <button id = "prev" class="btn btn-primary px-3">이전</button>
    <span id = "page" class="mx-3">1</span>
    <button id = "next" class="btn btn-primary px-3">다음</button>
  </div>
  
  <!--id는 자체적으로 정하는 거고 type은 handlebars 쓰는 거 정의됨-->
  <!--반복문으로 데이터 받을 양식 만들고 아래로 감.success 성공하면 data 변수로 받겠다는 거고,
  temp_list에 있는 걸 html로 컴파일 해서 화면에 표시
  div_list도 마찬가지. 이 2개 구분이 헷갈림.-->

  <!--중괄호 3번 하면 b태그가 실제 적용돼서 나옴. -->
  <script id="temp_list" type="x-handlebars-template">
  <!--웹에서 콘솔로 찍으면 data가 doucment 밑에 들어오는 거 알 수 있음
    개발자 페이지 예시 보면 사용되는 data 명 정해져 있음. 아래 place_name 등등 다 api에 정해져 있는 변수임-->
    <table class = "table table-striped table-hover">
        {{#each documents}}
          <tr>
            <td><a href="{{url}}">{{{title}}}</td>
            <td>{{{blog_name}}}</td>
          </tr>
        {{/each}}
    </table>
  </script>
</div>

<script>
  /*아래 변수명은 api에서 정해진 예시임*/
  let query = "인하대학교";
  let page =1;
  let size = 10;

  getList(); /*아래는 정의니까 호출 해줘야함.*/

  // 다음 버튼(next id를 가진 버튼)을 클릭한 경우아래 function을 실행함
  $("#next").on("click", function(){
    page++;
    getList();
  });

  // 이전 버튼(prev id를 가진 버튼)을 클릭한 경우 아래 function을 실행함
  $("#prev").on("click", function(){
    page--;
    getList();
  });



  /*name을 선택할 때는 아무 것도 안 하고 괄호 안에 name만 적음*/
  /*ajax은 원래 번쩍하는 거 아님.*/
  /*frm이 submit 될 때 변수를 받아서 default 동작을 막아라 -> 즉 화면 번쩍하면서 검색되는 걸 막아줌.*/
  /*query가 인하대학교로 고정되어 있으니까, query에 $로 select해서 frm.query의 value 값을 넣음*/
  /*값이 없으면 알람 주고, 값이 있으면 값 다시 가져오기.*/

  $(frm).on("submit",function(e){
      e.preventDefault();
      query=$(frm.query).val();
      if(query==""){
        alert("검색어를 입력하세요!");
      }else{
        getList();
      }
  });


  function getList(){
    $.ajax({
        type:"get",
        url:"https://dapi.kakao.com/v2/search/blog", 
        /* 저기 url에 /users 하면 위에 send respond 그거 출력됨 */
        data:{query, page, size},
        headers:{
                "Authorization": "KakaoAK 7dc21d5852274d162cc3c15163505083"
        },
        success:function(data){
          console.log(data);
          const temp=Handlebars.compile($("#temp_list").html());
          $("#div_list").html(temp(data));

          // Math.ceil은 올림 함수
          const last = Math.ceil(data.meta.pageable_count/size)
          //`` 이 백틱을 쓰면 문자와 변수를 쉽게 연결해 줄 수 있음.
          $("#page").html(`${page}/${last}`);
          
          // 이전 페이지 설정 
          if(page==1){
            $("#prev").attr("disabled",true);
          }else{
            $("#prev").attr("disabled",false);
          }
          
          // 마지막 페이지 설정 >> is_end는 api에서 지정된 data임.
          if(data.meta.is_end){
            $("#next").attr("disabled",true);
          }else{
            $("#next").attr("disabled",false)
          }
        }
    });

  }
</script>